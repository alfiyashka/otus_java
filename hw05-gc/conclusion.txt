
Таблица 1. Количество сборок gc(all count of collections in jconsole)
							| -Xms512m	|	-Xms1024m		|	-Xms8192m		| -Xms20480m
							| -Xmx512m	|	-Xmx1024m		|	-Xmx8192m       | -Xmx20480m
____________________________|___________|___________________|___________________|_____________
-XX:+UseG1GC                | 18        | 28                |29                 |33
                            | GC1: 18   |GC1: 26            |GC1: 28            |GC1: 31
							| GC2: 0    |GC2: 2             |GC2: 1             |GC2: 2
____________________________|___________|___________________|___________________|________________
-XX:+UseSerialGC            | 6         | 17                |8                  |6
                            | GC1: 5    |GC1: 5             |GC1: 5             |GC1: 5
							| GC2: 1    |GC2: 12            |GC2: 3             |GC2: 1
____________________________|___________|___________________|___________________|________________
-XX:+UseParallelGC          | 7         | 7                 |9                  |7
                            | GC1: 3    |GC1: 3             |GC1: 5             |GC1: 3
							| GC2: 4    |GC2: 4             |GC2: 4             |GC2: 4
____________________________|___________|___________________|___________________|________________
-XX:+UseConcMarkSweepGC     | 12        | 16                |28                 |60
                            | GC1: 6    |GC1: 6             |GC1: 23            |GC1: 54
							| GC2: 6    |GC2: 10            |GC2: 5             |GC2: 6
____________________________|___________|___________________|___________________|________________

Таблица 2. Общее время сборок gc(total time spent in jconsole)

							| -Xms512m	  |	-Xms1024m		  |	-Xms8192m         | -Xms20480m
							| -Xmx512m	  |	-Xmx1024m		  |	-Xmx8192m         | -Xmx20480m
____________________________|_____________|___________________|___________________|_____________
-XX:+UseG1GC                |             |                   |                   |
                            | GC1: 0,569s |GC1: 1,089s        |GC1: 6,775s        |GC1: 50,478s
							| GC2: 0s     |GC2: 1,457s        |GC2: 5,580s        |GC2: 360s
____________________________|_____________|___________________|___________________|________________
-XX:+UseSerialGC            |             |                   |                   |
                            | GC1: 0,571s |GC1: 0,916s        |GC1: 8,110s        |GC1: 32,751s
							| GC2: 0,631s |GC2: 14,483s       |GC2: 28,449s       |GC2: 120s
____________________________|_____________|___________________|___________________|________________
-XX:+UseParallelGC          |             |(no heap exception)|                   |
                            | GC1: 3,268s |GC1: 5,959s        |GC1: 60s           |GC1: 240s
							| GC2: 0,368s |GC2: 0,585s        |GC2: 4,882s        |GC2: 37,857s
____________________________|_____________|___________________|___________________|________________
-XX:+UseConcMarkSweepGC     |             |                   |                   |
                            | GC1: 0,848s |GC1: 1,421s        |GC1: 15,215s       |GC1: 60s
							| GC2: 3,557s |GC2: 15,120s       |GC2: 49,493s       |GC2: 2040s
____________________________|_____________|___________________|___________________|________________


Таблица 3. Время достижения ошибки утечки памяти

							| -Xms512m	  |	-Xms1024m		  |	-Xms8192m         | -Xms20480m
							| -Xmx512m	  |	-Xmx1024m		  |	-Xmx8192m         | -Xmx20480m
____________________________|_____________|___________________|___________________|_____________
-XX:+UseG1GC                |             |                   |                   |
                            | 302s        | 749s              |261s               | 4428s
____________________________|_____________|___________________|___________________|________________
-XX:+UseSerialGC            |             |                   |                   |
                            |  27s        | 197s              | 132s              | 465s
____________________________|_____________|___________________|___________________|________________
-XX:+UseParallelGC          |             |(no heap exception)|                   |                   
                            |  31s        | 17min             | 873s              | 518s
____________________________|_____________|___________________|___________________|________________
-XX:+UseConcMarkSweepGC     |             |                   |                   |
                            |  28s        | 281s              |137s               | 6067s min
____________________________|_____________|___________________|___________________|________________


Выше представлены результаты измерения разных сборщиков мусора с разными объемами памяти кучи и параметров цикла.
Параметры цикла были идентичны для определенного объема памяти.
Из-за того,  что с увеличением памяти увеличивался время достижения ошибки утечки памяти,
были изменены параметры цикла программы, на основе которого  выполнялись измерения.
За основу брала интервал возникновения утечки  памяти  равной  5-10 минут больше и меньше, используя сборщик мусора G1.
Результаты анализа получены утилитой jconsole.
 Проанализировав текущие измерения, можно сделать следующие выводы:
- при разных размерах кучи сборщики мусора ведут себя по-разному.
  Когда размер кучи до 1024mb, тогда интервал возникновения ошибки утечки памяти больше у сборщика мусора G1,
  а при большем значении кучи 8192мб –  больше ParallelGC и 20480мб - CMS .
- если посмотреть по общему числу сборок, то у сборщика G1 количество сборок больше,
  не считая последние значения сборщика CMS при большем размере кучи(20ГБ).
  И меньшее количество сборок было у SerialGC и ParallelGC.
- если взять за основу общее время для сборки, то видно, что время сборки прямо пропорционально
  увеличению  размера кучи. Если сравнить общее время сборки, то у сборщика мусора G1 меньше чем
  у остальных сборок мусора для размеров кучи 512m, 1024m, Xms8192m, а для размера кучи 20480m меньше у SerialGC
Вывод: на мой взгляд, лучший сборщик мусора это G1, так как у него меньшее время сборки.
 Это говорит о том,  что простои займут меньше времени. А так же у него количество сборок больше,
 это означает, что память чистится чаще и при меньших объемах кучи интервал достижения ошибки утечки
 памяти больше чем у остальных сборщиков мусора. В основном, стандартные приложения не имеют больший
 объем кучи, где наиболее оптимально будет использование сборщика мусора  G1.





















